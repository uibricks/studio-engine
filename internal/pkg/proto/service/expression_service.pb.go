// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: expression_service.proto

package service

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	expression "github.com/uibricks/studio-engine/internal/pkg/proto/expression"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("expression_service.proto", fileDescriptor_fd8d94f83c7c60bc) }

var fileDescriptor_fd8d94f83c7c60bc = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x48, 0xad, 0x28, 0x28,
	0x4a, 0x2d, 0x2e, 0xce, 0xcc, 0xcf, 0x8b, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0xa5, 0x74, 0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93,
	0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xd3, 0xf3, 0xd3, 0xf3, 0xf5, 0xc1, 0xf2, 0x49, 0xa5, 0x69, 0x60,
	0x1e, 0x98, 0x03, 0x66, 0x41, 0xf4, 0x49, 0x49, 0x23, 0x4c, 0xd4, 0x47, 0x30, 0x21, 0x92, 0x46,
	0x39, 0x5c, 0x82, 0xae, 0x70, 0xb1, 0x60, 0x88, 0x05, 0x42, 0xe1, 0x5c, 0x7c, 0xae, 0x65, 0x89,
	0x39, 0x08, 0x09, 0x21, 0x45, 0x3d, 0x24, 0x9d, 0xa8, 0x72, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5,
	0x25, 0x52, 0x4a, 0xf8, 0x94, 0x14, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x3a, 0x65, 0x9d, 0x78, 0x28,
	0xc7, 0xf0, 0xe3, 0xa1, 0x1c, 0xe3, 0x8a, 0x47, 0x72, 0x8c, 0x3b, 0x1e, 0xc9, 0x31, 0x1e, 0x78,
	0x24, 0xc7, 0x78, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e,
	0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x36, 0x48, 0xfe,
	0x2c, 0xcd, 0x4c, 0x2a, 0xca, 0x4c, 0xce, 0x2e, 0xd6, 0x2f, 0x2e, 0x29, 0x4d, 0xc9, 0xcc, 0xd7,
	0x4d, 0xcd, 0x4b, 0xcf, 0xcc, 0x4b, 0xd5, 0xcf, 0xcc, 0x2b, 0x49, 0x2d, 0xca, 0x4b, 0xcc, 0xd1,
	0x2f, 0xc8, 0x4e, 0x87, 0x04, 0x83, 0x3e, 0x34, 0x94, 0x92, 0xd8, 0xc0, 0x5c, 0x63, 0x40, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x0e, 0x54, 0x30, 0xd9, 0x51, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExpressionServiceClient is the client API for ExpressionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExpressionServiceClient interface {
	EvalExpression(ctx context.Context, in *expression.EvalExpressionRequest, opts ...grpc.CallOption) (*expression.EvalExpressionResponse, error)
}

type expressionServiceClient struct {
	cc *grpc.ClientConn
}

func NewExpressionServiceClient(cc *grpc.ClientConn) ExpressionServiceClient {
	return &expressionServiceClient{cc}
}

func (c *expressionServiceClient) EvalExpression(ctx context.Context, in *expression.EvalExpressionRequest, opts ...grpc.CallOption) (*expression.EvalExpressionResponse, error) {
	out := new(expression.EvalExpressionResponse)
	err := c.cc.Invoke(ctx, "/service.ExpressionService/EvalExpression", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExpressionServiceServer is the server API for ExpressionService service.
type ExpressionServiceServer interface {
	EvalExpression(context.Context, *expression.EvalExpressionRequest) (*expression.EvalExpressionResponse, error)
}

// UnimplementedExpressionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedExpressionServiceServer struct {
}

func (*UnimplementedExpressionServiceServer) EvalExpression(ctx context.Context, req *expression.EvalExpressionRequest) (*expression.EvalExpressionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvalExpression not implemented")
}

func RegisterExpressionServiceServer(s *grpc.Server, srv ExpressionServiceServer) {
	s.RegisterService(&_ExpressionService_serviceDesc, srv)
}

func _ExpressionService_EvalExpression_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(expression.EvalExpressionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpressionServiceServer).EvalExpression(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ExpressionService/EvalExpression",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpressionServiceServer).EvalExpression(ctx, req.(*expression.EvalExpressionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExpressionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.ExpressionService",
	HandlerType: (*ExpressionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EvalExpression",
			Handler:    _ExpressionService_EvalExpression_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "expression_service.proto",
}
