// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/google/wire"
	"github.com/uibricks/studio-engine/internal/app/project/app"
	"github.com/uibricks/studio-engine/internal/app/project/config"
	"github.com/uibricks/studio-engine/internal/app/project/services"
	config2 "github.com/uibricks/studio-engine/internal/pkg/config"
	"github.com/uibricks/studio-engine/internal/pkg/constants"
	"github.com/uibricks/studio-engine/internal/pkg/db"
	"github.com/uibricks/studio-engine/internal/pkg/middleware"
	"github.com/uibricks/studio-engine/internal/pkg/rabbitmq"
	"github.com/uibricks/studio-engine/internal/pkg/redis"
)

// Injectors from wire.go:

func InitializeApp() (*app.App, error) {
	appConfig, err := config.ProvideAppConfig()
	if err != nil {
		return nil, err
	}
	serverConfig := appConfig.ServerConfig
	dbConfig := appConfig.DatabaseConfig
	redisConfig := appConfig.RedisConfig
	rabbitMqConfig := appConfig.RabbitMqConfig
	prometheusConfig := appConfig.PrometheusConfig
	dbClient := db.ProvideDBClient()
	v := middleware.ProvideGrpcServerOpts()
	redisRedis, err := redis.ProvideDefaultRedisConn(redisConfig)
	if err != nil {
		return nil, err
	}
	rabbit, err := rabbitmq.ProvideDefaultRabbitMqConn(rabbitMqConfig)
	if err != nil {
		return nil, err
	}
	string2 := rabbitMqConfig.QueuePrefix
	replyQueueName := constants.ProvideReplyQueueName(string2)
	channel, err := rabbitmq.ProvideChannel(rabbit)
	if err != nil {
		return nil, err
	}
	queue, err := rabbitmq.ProvideQueue(replyQueueName, channel)
	if err != nil {
		return nil, err
	}
	projectServer := project.ProvideProjectServer(dbClient, redisRedis, rabbit, queue, channel)
	appApp := &app.App{
		ServerConfig:     serverConfig,
		DbConfig:         dbConfig,
		RedisConfig:      redisConfig,
		RabbitMqConfig:   rabbitMqConfig,
		PrometheusConfig: prometheusConfig,
		DbClient:         dbClient,
		GrpcServerOpts:   v,
		ProjectServer:    projectServer,
	}
	return appApp, nil
}

// wire.go:

var configSet = wire.NewSet(config.ProvideAppConfig, wire.FieldsOf(new(config.AppConfig), "ServerConfig"), wire.FieldsOf(new(config.AppConfig), "DatabaseConfig"), wire.FieldsOf(new(config.AppConfig), "RedisConfig"), wire.FieldsOf(new(config.AppConfig), "RabbitMqConfig"), wire.FieldsOf(new(config2.RabbitMqConfig), "QueuePrefix"), wire.FieldsOf(new(config.AppConfig), "PrometheusConfig"))

var rabbitMqSet = wire.NewSet(rabbitmq.ProvideDefaultRabbitMqConn, rabbitmq.ProvideQueue, rabbitmq.ProvideChannel, rabbitmq.ProvideQueueWithExp, constants.ProvideReplyQueueName)
